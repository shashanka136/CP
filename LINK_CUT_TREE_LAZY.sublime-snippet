<snippet>
	<content><![CDATA[
struct Linkcut {
	struct item {
		int p, ch[2], sz, id, maxid;
		ll val, sub, lazy;
		bool flip;
		item(int i = 0, int v = 0) {
			p = ch[0] = ch[1] = -1;
			if (i != -1) id = maxid = i;
			val = sub = v;
			flip = lazy = 0;
			sz = 1;
		}
	};
	vector<item> t;
	Linkcut(int n = 0) {
		t.resize(n);
		for (int i = 0; i < n; i++)
			t[i] = item(i);
	}
	void push(int x) {
		if (x == -1) return;
		int &l = t[x].ch[0], &r = t[x].ch[1];
		if (t[x].lazy) {
			t[x].val += t[x].lazy, t[x].sub += t[x].lazy * t[x].sz;
			if (l + 1) t[l].lazy += t[x].lazy;
			if (r + 1) t[r].lazy += t[x].lazy;
		}
		if (t[x].flip) {
			swap(l, r);
			if (l + 1) t[l].flip ^= 1;
			if (r + 1) t[r].flip ^= 1;
		}
		t[x].lazy = 0, t[x].flip = 0;
	}
	void pull(int x) {
		if (x == -1) return;
		t[x].sz = 1, t[x].sub = t[x].val, t[x].maxid = t[x].id;
		for (int i = 0; i < 2; i++) {
			int c = t[x].ch[i];
			if (c == -1) continue;
			push(c);
			t[x].sz += t[c].sz;
			t[x].maxid = max(t[x].maxid, t[c].maxid);
			t[x].sub += t[c].sub;
		}
	}
	bool is_root(int x) {//return true if x is root of it's auxiliary tree
		if (t[x].p == -1) return true;
		int l = t[t[x].p].ch[0], r = t[t[x].p].ch[1];
		return (l != x && r != x);
	}
	void rotate(int x) {
		int p = t[x].p, pp = t[p].p;
		if (!is_root(p)) t[pp].ch[t[pp].ch[1] == p] = x;
		bool d = (t[p].ch[0] == x);
		t[p].ch[!d] = t[x].ch[d], t[x].ch[d] = p;
		if (t[p].ch[!d] + 1) t[t[p].ch[!d]].p = p;
		t[x].p = pp, t[p].p = x;
		pull(p), pull(x);
	}
	int splay(int x) {//whenever using splay we already pushed
		while (!is_root(x)) {
			int p = t[x].p, pp = t[p].p;
			if (!is_root(p)) push(pp);
			push(p), push(x);
			if (!is_root(p))
				rotate((t[pp].ch[0] == p) ^ (t[p].ch[0] == x) ? x : p);
			rotate(x);
		}
		return push(x), x;
	}
	int access(int v) {//we already pushed at v
		int last = -1;//finally it'll be rooted at v
		for (int w = v; w + 1; pull(last = w), splay(v), w = t[v].p)
			splay(w), t[w].ch[1] = (last == -1 ? -1 : v);
		return last;
	}
	int find_root(int v) {
		access(v), push(v);
		while (t[v].ch[0] + 1) v = t[v].ch[0], push(v);
		return splay(v);
	}
	bool connected(int v, int w) {
		access(v), access(w);
		return v == w ? true : t[v].p != -1;
	}
	void rootify(int v) {//make v the root
		access(v);
		t[v].flip ^= 1;
	}
	int query(int v, int w) {//same as get path
		rootify(w), access(v);//at last root of auxiliary tree
		return v;//will be w
	}
	void update(int v, int w, int x) {//increase edge value from v to w by x
		rootify(w), access(v);
		t[v].lazy += x;
	}
	void link(int v, int w) {
		rootify(w);
		t[w].p = v;
	}
	void cut(int v, int w) {
		rootify(w), access(v);
		t[v].ch[0] = t[t[v].ch[0]].p = -1;
	}
	int lca(int v, int w) {
		access(v);
		return access(w);
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>_link_cut_tree_lazy--</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
