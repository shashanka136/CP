<snippet>
	<content><![CDATA[
struct item {
	ll n;
	item(int x = 0): n(x) {}
	item operator+(const item& oth) { //operation to merge
		item r;//default is done for sum
		r.n = n + oth.n;//must be a associative function
		return r;
	}
};

template<class node>
struct segtree {
	int n;
	vector<node> st;

	void init(int _n) { //give some default value value if required
		n = 1;
		while (n < _n) n *= 2;
		st.assign(2 * n, node());
	}
	inline int le(int x) {return 2 * x + 1;}
	inline int ri(int x) {return 2 * x + 2;}
	//change vector to int* if required in both build
	void build(vector<int> &a, int l, int r, int p) {
		if (l == r) {
			if (l < int(a.size())) st[p] = a[l];
			return;
		}
		int m = l + r >> 1;
		build(a, l, m, le(p));
		build(a, m + 1, r, ri(p));
		st[p] = st[le(p)] + st[ri(p)];
	}

	void build(vector<int> &a) {
		init(a.size());
		build(a, 0, n - 1, 0);
	}
	void set(int i, int x, int l, int r, int p) {
		if (i < l || i > r) return;
		if (l == r) {
			st[p] = x;
			return;
		}
		int m = l + r >> 1;
		if (i <= m) set(i, x, l, m, le(p));
		else set(i, x, m + 1, r, ri(p));

		st[p] = st[le(p)] + st[ri(p)];
	}
	void set(int i, int x) {
		set(i, x, 0, n - 1, 0);
	}

	node query(int ql, int qr, int l, int r, int p) {
		if (r < ql || l > qr) return node();
		if (ql <= l && r <= qr) return st[p];
		int m = l + r >> 1;
		return query(ql, qr, l, m, le(p)) +
		       query(ql, qr, m + 1, r, ri(p));
	}

	node query(int l, int r) {
		return query(l, r, 0, n - 1, 0);
	}
};
typedef segtree<item> segm;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>_segtree_recursive--</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
